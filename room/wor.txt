let messageStore = {}; // 使用内存存储消息

// 处理请求
addEventListener('fetch', (event) => {
    const { pathname } = new URL(event.request.url);

    if (pathname === "/sendMessage") {
        event.respondWith(handleSendMessage(event.request));
    } else if (pathname === "/getMessages") {
        event.respondWith(handleGetMessages(event.request));
    } else {
        event.respondWith(new Response("Not Found", { status: 404 }));
    }
});

// 处理消息发送
async function handleSendMessage(request) {
    if (request.method !== "POST") {
        return new Response("Invalid Method", { status: 405 });
    }

    try {
        const { recipientId, encryptedMessage } = await request.json();

        // 确保接收者的队列存在
        if (!messageStore[recipientId]) {
            messageStore[recipientId] = [];
        }

        // 添加消息到接收者的队列
        messageStore[recipientId].push(encryptedMessage);

        return new Response("Message Sent", { status: 200 });
    } catch (err) {
        return new Response("Bad Request", { status: 400 });
    }
}

// 处理消息获取
async function handleGetMessages(request) {
    if (request.method !== "GET") {
        return new Response("Invalid Method", { status: 405 });
    }

    try {
        const recipientId = new URL(request.url).searchParams.get("recipientId");

        if (!recipientId) {
            return new Response("Missing recipientId", { status: 400 });
        }

        // 获取接收者的消息队列
        const messages = messageStore[recipientId] || [];

        // 清空消息队列（模拟转发后删除）
        messageStore[recipientId] = [];

        return new Response(JSON.stringify(messages), {
            headers: { "Content-Type": "application/json" },
            status: 200,
        });
    } catch (err) {
        return new Response("Bad Request", { status: 400 });
    }
}
